<snippet>
	<content><![CDATA[
constexpr uint64_t mod = (1ULL << 61) - 1;
const uint64_t seed = chrono::system_clock::now().time_since_epoch().count();
const uint64_t base = mt19937_64(seed)() % (mod / 3) + (mod / 3);
int64_t modmul(uint64_t a, uint64_t b) {
    uint64_t l1 = (uint32_t)a, h1 = a >> 32, l2 = (uint32_t)b, h2 = b >> 32;
    uint64_t l = l1 * l2, m = l1 * h2 + l2 * h1, h = h1 * h2;
    uint64_t ret = (l & mod) + (l >> 61) + (h << 3) + (m >> 29) + (m << 35 >> 3) + 1;
    ret = (ret & mod) + (ret >> 61);
    ret = (ret & mod) + (ret >> 61);
    return ret - 1;
}
struct poly_hash {
    vector<uint64_t> base_pow;
    vector<int64_t> pref, suff;
    void build(const string &s, bool rev = 0) {
        int n = s.size();
        base_pow.resize(n + 1);
        pref.resize(n + 1);
        if (rev) suff.resize(n + 2);
        base_pow[0] = 1;
        for (int i = 1; i <= n; ++i) base_pow[i] = modmul(base_pow[i - 1], base);
        pref[0] = 0;
        for (int i = 1; i <= n; ++i) {
            pref[i] = modmul(pref[i - 1], base) + s[i - 1];
            if (pref[i] >= mod) pref[i] -= mod;
        }
        if (rev) {
            suff[n + 1] = 0;
            for (int i = n; i >= 1; --i) {
                suff[i] = modmul(suff[i + 1], base) + s[i - 1];
                if (suff[i] >= mod) suff[i] -= mod;
            }
        }
    }
    uint64_t get_hash(int l, int r) const {
        int64_t h = pref[r] - modmul(base_pow[r - l], pref[l]);
        return h < 0 ? h + mod : h;
    }
    uint64_t rev_hash(int l, int r) const {
        int64_t h = suff[l + 1] - modmul(base_pow[r - l], suff[r + 1]);
        return h < 0 ? h + mod : h;
    }
};
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>poly_hash</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<scope>source.c++</scope>
</snippet>
