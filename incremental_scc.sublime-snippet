<snippet>
	<content><![CDATA[
// Requires tarjan_scc
vector<int> incremental_scc(int N, vector<pair<int, int>> e) {
    int m = e.size();
    vector<int> id(m), sc(m), scc, num(N);
    vector<vector<int>> adj(N);
    iota(id.begin(), id.end(), 0);
    auto dnc = [&] (auto &&dnc, int l, int r, int n, vector<int>::iterator il, vector<int>::iterator ir) -> void {
        if (il == ir) return;
        if (l == r) {
            for (auto i = il; i != ir; ++i) sc[*i] = l;
            return;
        }
        int mid = (l + r) >> 1;
        for (int i = 0; i < n; ++i) adj[i].clear();
        for (auto i = il; i != ir; ++i) if (*i <= mid) adj[e[*i].first].emplace_back(e[*i].second);
        scc = tarjan_scc(n, adj);
        auto im = partition(il, ir, [&] (int i) {
            return scc[e[i].first] == scc[e[i].second];
        });
        fill(num.begin(), num.begin() + n, 0);
        for (auto i = il; i != im; ++i) num[e[*i].first] = num[e[*i].second] = 1;
        --num[0];
        for (int i = 1; i < n; ++i) num[i] += num[i - 1];
        for (auto i = il; i != im; ++i) {
            e[*i].first = num[e[*i].first];
            e[*i].second = num[e[*i].second];
        }
        for (auto i = im; i != ir; ++i) {
            e[*i].first = scc[e[*i].first];
            e[*i].second = scc[e[*i].second];
        }
        int nl = num[n - 1] + 1;
        int nr = *max_element(scc.begin(), scc.end()) + 1;
        dnc(dnc, l, mid, nl, il, im);
        dnc(dnc, mid + 1, r, nr, im, ir);
    };
    dnc(dnc, 0, m, N, id.begin(), id.end());
    return sc;
}
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>incremental_scc</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<scope>source.c++</scope>
</snippet>
