<snippet>
	<content><![CDATA[
// Requires range_minimum_query
struct lowest_common_ancestor_query {
    vector<int> tin, depth;
    range_minimum_query<pair<int, int>> rmq;
    void build(int n, int s, const vector<vector<int>> &adj) {
        tin.resize(n);
        depth.resize(n);
        vector<pair<int, int>> tour;
        auto dfs = [&] (auto &&dfs, int u, int par) -> void {
            tin[u] = tour.size();
            tour.emplace_back(depth[u], u);
            for (auto &v: adj[u]) if (v != par) {
                depth[v] = depth[u] + 1;
                dfs(dfs, v, u);
                tour.emplace_back(depth[u], u);
            }
        };
        depth[s] = 0;
        dfs(dfs, s, s);
        rmq.build(tour);
    }
    int lca(int u, int v) const {
        int l = tin[u], r = tin[v];
        if (l > r) swap(l, r);
        return rmq.query(l, ++r).second;
    }
    int dist(int u, int v) const {
        int l = tin[u], r = tin[v];
        if (l > r) swap(l, r);
        return depth[u] + depth[v] - (rmq.query(l, ++r).first << 1);
    }
};
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>lowest_common_ancestor_query</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<scope>source.c++</scope>
</snippet>
