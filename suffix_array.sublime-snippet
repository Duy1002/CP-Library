<snippet>
	<content><![CDATA[
void counting_sort(vector<int> &arr, const vector<int>::iterator &val) {
    int ma = 0;
    for (int &x: arr) ma = max(ma, val[x]);
    vector<int> cnt(ma + 1);
    for (int &x: arr) ++cnt[val[x]];
    for (int i = 0, sum = 0; i <= ma; ++i) {
        int tmp = cnt[i];
        cnt[i] = sum;
        sum += tmp;
    }
    vector<int> new_arr(arr.size());
    for (int &x: arr) new_arr[cnt[val[x]]++] = x;
    arr = new_arr;
}
vector<int> suffix_array(vector<int> s) {
    int n = s.size();
    if (n == 1) return vector<int>(1);
    s.resize(n + 2);
    int n0 = (n + 2) / 3, n1 = (n + 1) / 3, n2 = n / 3, n12 = n1 + n2;
    vector<int> sa12(n12);
    for (int i = 0; i < n1; ++i) sa12[i] = i * 3 + 1;
    for (int i = 0; i < n2; ++i) sa12[i + n1] = i * 3 + 2;
    counting_sort(sa12, s.begin() + 2);
    counting_sort(sa12, s.begin() + 1);
    counting_sort(sa12, s.begin());
    vector<int> equiv(n + 1);
    equiv[sa12[0]] = 2;
    for (int i = 1; i < n12; ++i) equiv[sa12[i]] = equiv[sa12[i - 1]] + (s[sa12[i]] != s[sa12[i - 1]] ||
                                                                         s[sa12[i] + 1] != s[sa12[i - 1] + 1] ||
                                                                         s[sa12[i] + 2] != s[sa12[i - 1] + 2]);
    if (equiv[sa12[n12 - 1]] <= n12) {
        vector<int> s12(n12 + 1);
        for (int i = 0; i < n1; ++i) s12[i] = equiv[i * 3 + 1];
        s12[n1] = 1;
        for (int i = 0; i < n2; ++i) s12[i + n1 + 1] = equiv[i * 3 + 2];
        sa12 = suffix_array(s12);
        sa12.erase(sa12.begin());
        for (int &x: sa12) x = x < n1 ? x * 3 + 1 : (x - n1) * 3 - 1;
        equiv[sa12[0]] = 2;
        for (int i = 1; i < n12; ++i) equiv[sa12[i]] = equiv[sa12[i - 1]] + 1;
    }
    vector<int> sa0(n0);
    for (int i = 0; i < n0; ++i) sa0[i] = i * 3;
    counting_sort(sa0, equiv.begin() + 1);
    counting_sort(sa0, s.begin());
    vector<int> sa(n);
    int i = 0, j = 0, k = 0;
    while (i < n12 && j < n0) {
        int suff12 = sa12[i], suff0 = sa0[j];
        while (true) {
            if (s[suff12] != s[suff0]) {
                sa[k++] = s[suff12] < s[suff0] ? sa12[i++] : sa0[j++];
                break;
            }
            ++suff12, ++suff0;
            if (equiv[suff12] && equiv[suff0]) {
                sa[k++] = equiv[suff12] < equiv[suff0] ? sa12[i++] : sa0[j++];
                break;
            }
        }
    }
    while (i < n12) sa[k++] = sa12[i++];
    while (j < n0) sa[k++] = sa0[j++];
    return sa;
}
vector<int> suffix_array(const string &t) {
    int n = t.size();
    vector<int> s(n);
    for (int i = 0; i < n; ++i) s[i] = t[i];
    return suffix_array(s);
}
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>suffix_array</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<scope>source.c++</scope>
</snippet>
