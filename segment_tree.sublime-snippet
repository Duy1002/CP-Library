<snippet>
    <content><![CDATA[
template<typename T, typename TT>
struct segment_tree {
    int n;
    vector<T> t;
    TT op;
    T id;
    segment_tree(TT op, T id): op(op), id(id) {}
    void build(int m) {
        n = 1 << (__lg(m) + 1);
        t.resize(n << 1, id);
    }
    void build(const vector<T> &a) {
        int m = a.size();
        build(m);
        for (int i = 0; i < m; ++i) t[i + n] = a[i];
        for (int i = n; --i;) t[i] = op(t[i << 1], t[i << 1 | 1]);
    }
    void update(int p, const T &v) {
        for (t[p += n] = v; p >>= 1;) t[p] = op(t[p << 1], t[p << 1 | 1]);
    }
    void update(int l, int r, const T &v) {
        for (l += n, r += n; l < r; l >>= 1, r >>= 1) {
            if (l & 1) t[l++] = op(t[l], v);
            if (r & 1) t[r] = op(t[--r], v);
        }
    }
    T get(int i) const {
        return t[i + n];
    }
    T query(int l, int r) const {
        T resl = id, resr = id;
        for (l += n, r += n; l < r; l >>= 1, r >>= 1) {
            if (l & 1) resl = op(resl, t[l++]);
            if (r & 1) resr = op(t[--r], resr);
        }
        return op(resl, resr);
    }
    T query(int p) const {
        T res = id;
        for (p += n; p; p >>= 1) res = op(res, t[p]);
        return res;
    }
    template<typename F>
    int lower_bound(F f) const {
        if (f(t[1])) return n;
        int i = 1;
        while (i < n) i = f(t[i << 1]) ? i << 1 | 1 : i << 1;
        return i - n;
    }
};
]]></content>
    <!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
    <tabTrigger>segment_tree</tabTrigger>
    <!-- Optional: Set a scope to limit where the snippet will trigger -->
    <scope>source.c++</scope>
</snippet>
